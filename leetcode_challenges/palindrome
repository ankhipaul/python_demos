# using isalpha(), this uses more  memory when we do reversing string, creating another string

def isPalindrome(self, s: str) -> bool:
        new_str = "".join(letter.lower() for letter in s if letter.isalpha())
        return new_str == new_str[::-1]


# Two pointer solution
class Solution:
    def isPalindrome(self, s: str) -> bool:
        l = 0 
        r = len(s) - 1
        while l < r :
            while not self.alphanumeric(s[l]) and l < r :
                l = l+1
            while not self.alphanumeric(s[r]) and r > l :
                r = r-1
            if s[l].lower() != s[r].lower():
                return False
            
            l = l+1
            r = r-1

        return True
    
    def alphanumeric(self, char: str) -> bool:
        return (ord('A') <= ord(char) <= ord('Z') or 
               ord('a') <= ord(char) <= ord('z') or
               ord('0') <= ord(char) <= ord('9') )

